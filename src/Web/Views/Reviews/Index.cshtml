@model MinimalAirbnb.Web.Models.PagedListWrapper<MinimalAirbnb.Application.Reviews.DTOs.ReviewDto>
@{
    ViewData["Title"] = "Değerlendirmelerim";
    var currentPage = Model.PageNumber + 1;
}

<div class="container py-5">
    <!-- Başlık -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="fw-bold">
                        <i class="bi bi-star text-warning"></i> Değerlendirmelerim
                    </h1>
                    <p class="text-muted">Tüm değerlendirmelerinizi buradan yönetebilirsiniz</p>
                </div>
                <a href="@Url.Action("Create")" class="btn btn-primary">
                    <i class="bi bi-plus-circle"></i> Yeni Değerlendirme
                </a>
            </div>
        </div>
    </div>

    <!-- Filtreler -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-body">
                    <form method="get" class="row g-3">
                        <div class="col-md-3">
                            <label class="form-label">Puan</label>
                            <select name="Rating" class="form-select">
                                <option value="">Tümü</option>
                                <option value="5" selected="@(Context.Request.Query["Rating"] == "5")">5 Yıldız</option>
                                <option value="4" selected="@(Context.Request.Query["Rating"] == "4")">4 Yıldız</option>
                                <option value="3" selected="@(Context.Request.Query["Rating"] == "3")">3 Yıldız</option>
                                <option value="2" selected="@(Context.Request.Query["Rating"] == "2")">2 Yıldız</option>
                                <option value="1" selected="@(Context.Request.Query["Rating"] == "1")">1 Yıldız</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Durum</label>
                            <select name="IsApproved" class="form-select">
                                <option value="">Tümü</option>
                                <option value="true" selected="@(Context.Request.Query["IsApproved"] == "true")">Onaylanmış</option>
                                <option value="false" selected="@(Context.Request.Query["IsApproved"] == "false")">Beklemede</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Tarih</label>
                            <input type="date" name="StartDate" class="form-control" value="@Context.Request.Query["StartDate"]">
                        </div>
                        <div class="col-md-3 d-flex align-items-end">
                            <button type="submit" class="btn btn-primary me-2">
                                <i class="bi bi-search"></i> Filtrele
                            </button>
                            <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
                                <i class="bi bi-arrow-clockwise"></i> Temizle
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Değerlendirme Listesi -->
    <div class="row">
        @if (Model?.Data != null && Model.Data.Any())
        {
            foreach (var review in Model.Data)
            {
                <div class="col-12 mb-4">
                    <div class="card shadow-sm">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-8">
                                    <div class="d-flex align-items-center mb-3">
                                        <h5 class="card-title mb-0 me-3">@review.PropertyTitle</h5>
                                        @if (review.IsApproved)
                                        {
                                            <span class="badge bg-success">Onaylanmış</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-warning">Beklemede</span>
                                        }
                                    </div>
                                    
                                    <div class="d-flex align-items-center mb-3">
                                        <div class="text-warning me-3">
                                                                                         @for (int i = 0; i < (int)review.Rating; i++)
                                             {
                                                 <i class="bi bi-star-fill"></i>
                                             }
                                             @for (int i = (int)review.Rating; i < 5; i++)
                                            {
                                                <i class="bi bi-star"></i>
                                            }
                                        </div>
                                        <span class="fw-bold">@((int)review.Rating) / 5</span>
                                    </div>
                                    
                                    <p class="card-text">@review.Comment</p>
                                    
                                    <div class="row mb-3">
                                        <div class="col-md-6">
                                                                                         <small class="text-muted">
                                                 <i class="bi bi-person"></i> @review.GuestName
                                             </small>
                                        </div>
                                        <div class="col-md-6">
                                            <small class="text-muted">
                                                <i class="bi bi-calendar"></i> @review.CreatedDate.ToString("dd.MM.yyyy HH:mm")
                                            </small>
                                        </div>
                                    </div>
                                    
                                    @if (!string.IsNullOrEmpty(review.RejectionReason))
                                    {
                                        <div class="alert alert-warning">
                                            <i class="bi bi-exclamation-triangle"></i>
                                            <strong>Red Nedeni:</strong> @review.RejectionReason
                                        </div>
                                    }
                                </div>
                                
                                <div class="col-md-4 text-md-end">
                                    <div class="btn-group btn-group-sm d-block mb-2">
                                        <a href="@Url.Action("Details", new { id = review.Id })" class="btn btn-outline-primary">
                                            <i class="bi bi-eye"></i> Görüntüle
                                        </a>
                                        <a href="@Url.Action("Edit", new { id = review.Id })" class="btn btn-outline-warning">
                                            <i class="bi bi-pencil"></i> Düzenle
                                        </a>
                                        <button type="button" class="btn btn-outline-danger" onclick="deleteReview('@review.Id')">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                    
                                    <div class="d-flex justify-content-end gap-2">
                                        <button type="button" class="btn btn-outline-success btn-sm" onclick="likeReview('@review.Id')">
                                            <i class="bi bi-hand-thumbs-up"></i> @review.LikeCount
                                        </button>
                                        <button type="button" class="btn btn-outline-danger btn-sm" onclick="dislikeReview('@review.Id')">
                                            <i class="bi bi-hand-thumbs-down"></i> @review.DislikeCount
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12 text-center py-5">
                <i class="bi bi-star fs-1 text-muted mb-3"></i>
                <h3>Henüz değerlendirmeniz bulunmuyor</h3>
                <p class="text-muted">Kaldığınız evler hakkında değerlendirme yapabilirsiniz.</p>
                <a href="@Url.Action("Create")" class="btn btn-primary">
                    <i class="bi bi-plus-circle"></i> Yeni Değerlendirme
                </a>
            </div>
        }
    </div>

    <!-- Sayfalama -->
    @if (Model?.TotalPages > 1)
    {
        <div class="row">
            <div class="col-12">
                <nav aria-label="Değerlendirme sayfalama">
                    <ul class="pagination justify-content-center">
                        @if (currentPage > 1)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", new { PageNumber = currentPage - 1, PageSize = Model.PageSize, Rating = Context.Request.Query["Rating"], IsApproved = Context.Request.Query["IsApproved"], StartDate = Context.Request.Query["StartDate"] })">
                                    Önceki
                                </a>
                            </li>
                        }

                        @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(Model.TotalPages, currentPage + 2); i++)
                        {
                            <li class="page-item @(i == currentPage ? "active" : "")">
                                <a class="page-link" href="@Url.Action("Index", new { PageNumber = i, PageSize = Model.PageSize, Rating = Context.Request.Query["Rating"], IsApproved = Context.Request.Query["IsApproved"], StartDate = Context.Request.Query["StartDate"] })">
                                    @i
                                </a>
                            </li>
                        }

                        @if (currentPage < Model.TotalPages)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", new { PageNumber = currentPage + 1, PageSize = Model.PageSize, Rating = Context.Request.Query["Rating"], IsApproved = Context.Request.Query["IsApproved"], StartDate = Context.Request.Query["StartDate"] })">
                                    Sonraki
                                </a>
                            </li>
                        }
                    </ul>
                </nav>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        function deleteReview(reviewId) {
            if (confirm('Bu değerlendirmeyi silmek istediğinizden emin misiniz?')) {
                fetch(`/api/reviews/${reviewId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        location.reload();
                    } else {
                        alert('Hata: ' + result.message);
                    }
                })
                .catch(error => {
                    alert('Değerlendirme silinirken bir hata oluştu: ' + error.message);
                });
            }
        }

        function likeReview(reviewId) {
            fetch(`/api/reviews/${reviewId}/like`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    location.reload();
                } else {
                    alert('Hata: ' + result.message);
                }
            })
            .catch(error => {
                alert('Beğeni işlemi sırasında hata: ' + error.message);
            });
        }

        function dislikeReview(reviewId) {
            fetch(`/api/reviews/${reviewId}/dislike`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    location.reload();
                } else {
                    alert('Hata: ' + result.message);
                }
            })
            .catch(error => {
                alert('Beğenmeme işlemi sırasında hata: ' + error.message);
            });
        }
    </script>
} 