@model MinimalAirbnb.Web.Models.PagedListWrapper<MinimalAirbnb.Application.Messages.DTOs.MessageDto>
@{
    ViewData["Title"] = "Mesajlarım";
    var currentPage = Model.PageNumber + 1;
}

<div class="container py-5">
    <!-- Başlık -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="fw-bold">
                        <i class="bi bi-envelope text-primary"></i> Mesajlarım
                    </h1>
                    <p class="text-muted">Tüm mesajlarınızı buradan yönetebilirsiniz</p>
                </div>
                <a href="@Url.Action("Create")" class="btn btn-primary">
                    <i class="bi bi-plus-circle"></i> Yeni Mesaj
                </a>
            </div>
        </div>
    </div>

    <!-- Filtreler -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-body">
                    <form method="get" class="row g-3">
                        <div class="col-md-3">
                            <label class="form-label">Kategori</label>
                            <select name="Category" class="form-select">
                                <option value="">Tümü</option>
                                <option value="1" selected="@(Context.Request.Query["Category"] == "1")">Genel</option>
                                <option value="2" selected="@(Context.Request.Query["Category"] == "2")">Rezervasyon</option>
                                <option value="3" selected="@(Context.Request.Query["Category"] == "3")">Teknik Destek</option>
                                <option value="4" selected="@(Context.Request.Query["Category"] == "4")">Ödeme</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Öncelik</label>
                            <select name="Priority" class="form-select">
                                <option value="">Tümü</option>
                                <option value="1" selected="@(Context.Request.Query["Priority"] == "1")">Düşük</option>
                                <option value="2" selected="@(Context.Request.Query["Priority"] == "2")">Normal</option>
                                <option value="3" selected="@(Context.Request.Query["Priority"] == "3")">Yüksek</option>
                                <option value="4" selected="@(Context.Request.Query["Priority"] == "4")">Kritik</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Durum</label>
                            <select name="IsRead" class="form-select">
                                <option value="">Tümü</option>
                                <option value="false" selected="@(Context.Request.Query["IsRead"] == "false")">Okunmamış</option>
                                <option value="true" selected="@(Context.Request.Query["IsRead"] == "true")">Okunmuş</option>
                            </select>
                        </div>
                        <div class="col-md-3 d-flex align-items-end">
                            <button type="submit" class="btn btn-primary me-2">
                                <i class="bi bi-search"></i> Filtrele
                            </button>
                            <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
                                <i class="bi bi-arrow-clockwise"></i> Temizle
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Mesaj Listesi -->
    <div class="row">
        @if (Model?.Data != null && Model.Data.Any())
        {
            foreach (var message in Model.Data)
            {
                <div class="col-12 mb-3">
                    <div class="card shadow-sm @(!message.IsRead ? "border-primary" : "")">
                        <div class="card-body">
                            <div class="row align-items-center">
                                <div class="col-md-8">
                                    <div class="d-flex align-items-center mb-2">
                                        <h6 class="card-title mb-0 me-3">@message.Subject</h6>
                                        @if (!message.IsRead)
                                        {
                                            <span class="badge bg-primary">Yeni</span>
                                        }
                                        <span class="badge @GetPriorityBadgeClass(message.Priority) ms-2">
                                            @GetPriorityText(message.Priority)
                                        </span>
                                        <span class="badge @GetCategoryBadgeClass(message.Category) ms-2">
                                            @GetCategoryText(message.Category)
                                        </span>
                                    </div>
                                    
                                    <p class="text-muted mb-2">
                                        <i class="bi bi-person"></i> 
                                        @if (message.SenderId == Guid.Empty)
                                        {
                                            <span>@message.SenderName</span>
                                        }
                                        else
                                        {
                                            <span>@message.SenderName</span>
                                        }
                                        <i class="bi bi-arrow-right mx-2"></i>
                                        @if (message.ReceiverId == Guid.Empty)
                                        {
                                            <span>@message.ReceiverName</span>
                                        }
                                        else
                                        {
                                            <span>@message.ReceiverName</span>
                                        }
                                    </p>
                                    
                                    <p class="card-text text-truncate">@message.Content</p>
                                    
                                                                         <small class="text-muted">
                                         <i class="bi bi-clock"></i> @message.CreatedAt.ToString("dd.MM.yyyy HH:mm")
                                     </small>
                                </div>
                                
                                <div class="col-md-4 text-md-end">
                                    <div class="btn-group btn-group-sm">
                                        <a href="@Url.Action("Details", new { id = message.Id })" class="btn btn-outline-primary">
                                            <i class="bi bi-eye"></i> Görüntüle
                                        </a>
                                        <a href="@Url.Action("Edit", new { id = message.Id })" class="btn btn-outline-warning">
                                            <i class="bi bi-pencil"></i> Düzenle
                                        </a>
                                        <button type="button" class="btn btn-outline-danger" onclick="deleteMessage('@message.Id')">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12 text-center py-5">
                <i class="bi bi-envelope fs-1 text-muted mb-3"></i>
                <h3>Henüz mesajınız bulunmuyor</h3>
                <p class="text-muted">Yeni mesajlarınız burada görünecek.</p>
                <a href="@Url.Action("Create")" class="btn btn-primary">
                    <i class="bi bi-plus-circle"></i> Yeni Mesaj
                </a>
            </div>
        }
    </div>

    <!-- Sayfalama -->
    @if (Model?.TotalPages > 1)
    {
        <div class="row">
            <div class="col-12">
                <nav aria-label="Mesaj sayfalama">
                    <ul class="pagination justify-content-center">
                        @if (currentPage > 1)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", new { PageNumber = currentPage - 1, PageSize = Model.PageSize, Category = Context.Request.Query["Category"], Priority = Context.Request.Query["Priority"], IsRead = Context.Request.Query["IsRead"] })">
                                    Önceki
                                </a>
                            </li>
                        }

                        @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(Model.TotalPages, currentPage + 2); i++)
                        {
                            <li class="page-item @(i == currentPage ? "active" : "")">
                                <a class="page-link" href="@Url.Action("Index", new { PageNumber = i, PageSize = Model.PageSize, Category = Context.Request.Query["Category"], Priority = Context.Request.Query["Priority"], IsRead = Context.Request.Query["IsRead"] })">
                                    @i
                                </a>
                            </li>
                        }

                        @if (currentPage < Model.TotalPages)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", new { PageNumber = currentPage + 1, PageSize = Model.PageSize, Category = Context.Request.Query["Category"], Priority = Context.Request.Query["Priority"], IsRead = Context.Request.Query["IsRead"] })">
                                    Sonraki
                                </a>
                            </li>
                        }
                    </ul>
                </nav>
            </div>
        </div>
    }
</div>

@functions {
    private string GetPriorityBadgeClass(MinimalAirbnb.Domain.Enums.MessagePriority priority)
    {
        return priority switch
        {
            MinimalAirbnb.Domain.Enums.MessagePriority.Low => "bg-success",
            MinimalAirbnb.Domain.Enums.MessagePriority.Normal => "bg-primary",
            MinimalAirbnb.Domain.Enums.MessagePriority.High => "bg-warning",
            MinimalAirbnb.Domain.Enums.MessagePriority.Critical => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetPriorityText(MinimalAirbnb.Domain.Enums.MessagePriority priority)
    {
        return priority switch
        {
            MinimalAirbnb.Domain.Enums.MessagePriority.Low => "Düşük",
            MinimalAirbnb.Domain.Enums.MessagePriority.Normal => "Normal",
            MinimalAirbnb.Domain.Enums.MessagePriority.High => "Yüksek",
            MinimalAirbnb.Domain.Enums.MessagePriority.Critical => "Kritik",
            _ => "Bilinmiyor"
        };
    }

    private string GetCategoryBadgeClass(MinimalAirbnb.Domain.Enums.MessageCategory category)
    {
        return category switch
        {
            MinimalAirbnb.Domain.Enums.MessageCategory.General => "bg-info",
            MinimalAirbnb.Domain.Enums.MessageCategory.Reservation => "bg-primary",
            MinimalAirbnb.Domain.Enums.MessageCategory.TechnicalSupport => "bg-warning",
            MinimalAirbnb.Domain.Enums.MessageCategory.Payment => "bg-success",
            _ => "bg-secondary"
        };
    }

    private string GetCategoryText(MinimalAirbnb.Domain.Enums.MessageCategory category)
    {
        return category switch
        {
            MinimalAirbnb.Domain.Enums.MessageCategory.General => "Genel",
            MinimalAirbnb.Domain.Enums.MessageCategory.Reservation => "Rezervasyon",
            MinimalAirbnb.Domain.Enums.MessageCategory.TechnicalSupport => "Teknik Destek",
            MinimalAirbnb.Domain.Enums.MessageCategory.Payment => "Ödeme",
            _ => "Bilinmiyor"
        };
    }
}

@section Scripts {
    <script>
        function deleteMessage(messageId) {
            if (confirm('Bu mesajı silmek istediğinizden emin misiniz?')) {
                fetch(`/api/messages/${messageId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        location.reload();
                    } else {
                        alert('Hata: ' + result.message);
                    }
                })
                .catch(error => {
                    alert('Mesaj silinirken bir hata oluştu: ' + error.message);
                });
            }
        }
    </script>
} 